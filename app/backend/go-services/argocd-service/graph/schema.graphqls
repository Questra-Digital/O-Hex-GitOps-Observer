# GraphQL schema example
#
# https://gqlgen.com/getting-started/


type Summary {
  images: [String]
}

type Source {
  repoURL: String
  path: String
  targetRevision: String
}

type Resources {
  group: String
  version: String
  kind: String
  namespace: String
  name: String
  status: String
  message: String
  hookPhase: String
  syncPhase: String
}

type SyncResult {
  revision: String
  source: Source
  resources: [Resources]
}

type Retry {
  limit: Int
}

type InitiatedBy {
  automated: Boolean
}

type Sync {
  revision: String
  prune: Boolean
  syncOptions: [String]
}

type Operation {
  retry: Retry
  initiatedBy: InitiatedBy
  sync: Sync
}

type OperationState {
  phase: String
  message: String
  startedAt: String
  finishedAt: String
  syncResult: SyncResult
  operation: Operation
}

type History {
  revision: String
  deployedAt: String
  id: Int
  deployStartedAt: String
  source: Source
}

type Health {
  status: String
}

type Destination {
  server: String
  namespace: String
}

type ComparedTo {
  destination: Destination
  source: Source
}

type Status {
  reconciledAt: String
  sourceType: String
  summary: Summary
  operationState: OperationState
  history: [History]
  health: Health
  sync: Sync
  resources: [Resources]
}

type Automated {
  prune: Boolean
  selfHeal: Boolean
}

type SyncPolicy {
  syncOptions: [String]
  automated: Automated
}

type Spec {
  project: String
  syncPolicy: SyncPolicy
  destination: Destination
  source: Source
}

type ManagedFields {
  manager: String
  operation: String
  apiVersion: String
  time: String
  fieldsType: String
}

type Annotations {
  kubectlkubernetesiolastappliedconfiguration: String
}

type Metadata {
  name: String
  namespace: String
  uid: String
  resourceVersion: String
  generation: Int
  creationTimestamp: String
  managedFields: [ManagedFields]
  annotations: Annotations
}

type Items {
  status: Status
  spec: Spec
  metadata: Metadata
}




type MyObjectMetadata {
  resourceVersion: String
}


type JobListing {

  _id: ID!
  metadata: MyObjectMetadata!
  items: [Items]
  
}



#---------------------------------------------------------------------
type Query {
  job(id: ID!): JobListing!
}

